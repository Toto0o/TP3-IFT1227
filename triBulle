.data
buffer:			.space	400
taille:			.word 0
print:			.word 0
new_line_count:		.word 0
msg_input:		.asciiz	"Entrez un nombre (-1 pour terminer):  "
msg_depassement:	.asciiz "Vous avez dépassez la taille maximale permise"			

.text
main:	
	la $a0, buffer
	la $a1, taille
	jal saisir
	
	la $a0, buffer
	la $a1, taille
	la $a2, print
	la $a3, new_line_count
	jal afficher
	
	la $a0, buffer
	la $a1, taille
	jal trier
	
	la $a0, buffer
	la $a1, taille
	la $a2, print
	la $a3, new_line_count
	jal afficher
	
	li $v0,10
	syscall
	
saisir:
	#stocker les arguments dans la stack
	addi $sp, $sp, -12
	sw $ra, 0($sp)
	sw $a0, 4($sp)
	sw $a1, 8($sp)
	
boucle_saisir:
	#boucle de saisie principal

	#verifier capacite
	lw $a1, 8($sp)
	lw $a1, 0($a1)
	blt $a1, 400, input
	
	#si depassement :
	la $a0, msg_depassement
	li $v0, 4
	syscall
	j fin_saisir
	
input:
	#input de l'utilisateur, -1 pour terminer
	la $a0, msg_input
	li $v0, 4
	syscall
	li $v0, 5
	syscall
	move $t0, $v0 #placer le input de l'utilisateur dans $t0
	
	#si le nombre entré est -1, finir la saisie
	li $t2, -1
	beq $t0, $t2, fin_saisir
	
	#sinon, stocker dans buffer
	lw $a0, 4($sp)	#contient pointer vers buffer
	lw $a1, 8($sp)
	lw $t2, 0($a1)	#modifier la valeur de taille
	
	#calcul de l'adresse pour placer le prochain nombre
	add $t1, $a0, $t2	
	sw $t0, 0($t1)
	
	
	addi $t2, $t2, 4 #incremter taille +4
	sw $t2, 0($a1)
	j boucle_saisir

fin_saisir:
	lw $ra 0($sp)
	addi $sp, $sp, 12
	jr $ra
	
afficher:
	#stocker les arguments dans la stack
	addi $sp, $sp, -20
	sw $ra, 0($sp)
	sw $a0, 4($sp)
	sw $a1, 8($sp)
	sw $a2, 12($sp)
	sw $a3, 16($sp)
	
boucle_afficher:
	#load des arguments
	lw $a0, 4($sp)
	
	lw $a1, 8($sp)
	lw $t1, 0($a1) #taille
	
	lw $a2, 12($sp)
	lw $s0, 0($a2) #nombre de caractère imprimé
	
	#adresse a imprimer + print
	add $t2, $s0, $a0 
	lw $a0, 0($t2)
	li $v0, 1
	syscall
	
	#tab pour espacer les print
	li $v0, 11
	addi $a0, $0, '\t'
	syscall
	
	#verifier pour nouvelle ligne apres 4 print
	lw $a3, 16($sp)	#new_line_count
	lw $s1, 0($a3)
	addi $s1, $s1, 1
	sw $s1, 0($a3)
	li $s2, 4
	beq $s1, $s2, new_line
end_new_line:
	#incrementer le nombre de print
	addi $s0, $s0, 4
	sw $s0, 0($a2)
	
	#si taille = nombre de print
	beq $t1, $s0, end_afficher
	
	#continuer la boucle de print
	j boucle_afficher
	
new_line:
	#pour inprimer une nouvelle ligne
	
	#remettre le compte d'élément de 4 par ligne a 0
	lw $a3, 16($sp)
	lw $s1, 0($a3)
	addi $s1, $s1, -4
	sw $s1, 0($a3)
	
	#imprimer sur une nouvelle ligne
	li $v0, 11
	addi $a0, $0, '\n'
	syscall
	
	#retour à l'impression
	j end_new_line
	

end_afficher:
	#pour commencer le print final sur une nouvelle ligne
	li $v0, 11
	addi $a0, $0, '\n'
	syscall
	
	#unstack les arguments et saut vers le main
	lw $ra, 0($sp)
	lw $a0, 4($sp)
	lw $a1, 8($sp)
	lw $a2, 12($sp)
	lw $a3, 16($sp)
	addi $sp, $sp, 20
	sw $0, 0($a2)
	sw $0, 0($a3)
	jr $ra

trier:	
	addi $sp, $sp, -20
	sw $ra, 0($sp)
	sw $a0, 4($sp)	#buffer
	sw $a1, 8($sp)	#taille
	sw $0, 12($sp)	#tri_count
	li $s0, 1
	sw $s0, 16($sp)	#echange
	
	
boucle_while:
	lw $a0, 4($sp)	#buffer
	lw $a1, 8($sp)	#taille
	lw $a2, 12($sp)	#tri_count
	lw $a3, 16($sp)	#echange
	
	sw $0, 12($sp)	#pour assurer de faire le for_loop a partir de 0
	
	beqz $a3, fin_trier 	#while echange
	
	sw $0, 16($sp)		#echange = False (0)
	
for_loop:
	lw $t0, 12($sp)	#tri_count		
	lw $t1, 0($a1)	#taille
	
	addi $t1, $t1, -4
	beq $t0, $t1, boucle_while	#for i in range (len(t)-1)
	
	add $s0, $a0, $t0
	lw $t2, 0($s0)	#t[i]
	
	addi $s1, $s0, 4
	lw $t3, 0($s1)	#t[i+1]
	
	addi $t0, $t0, 4 #incrementer tri_count (compteur de la boucle for)
	sw $t0, 12($sp)
	blt $t2, $t3, for_loop
	
	move $t4, $t2	#temp = t[i]
	move $t2, $t3	#t[i] = t[i+1]
	move $t3, $t4	#t[i+1] = temp
	
	sw $t2, 0($s0)
	sw $t3, 0($s1)
	
	li $s0, 1
	sw $s0, 16($sp)	#echange = True
	j for_loop
	
fin_trier:
	#unstack et callback
	lw $ra, 0($sp)	#callback
	lw $a0, 4($sp)	#buffer
	lw $a1, 8($sp)	#taille
	lw $a2, 12($sp)	#tri_count
	lw $a3, 16($sp)	#echange
	addi $sp, $sp, 20
	jr $ra
	
	
	

	
